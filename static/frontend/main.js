// Tab switching
const tabs = document.querySelectorAll('.tab-btn');
const contents = document.querySelectorAll('.tab-content');
tabs.forEach(btn => btn.addEventListener('click', () => {
    tabs.forEach(b => b.classList.remove('active'));
    contents.forEach(c => c.classList.remove('active'));
    btn.classList.add('active');
    document.getElementById(btn.dataset.tab).classList.add('active');
}));
tabs[0].click(); // Show first tab by default

const BASE_URL = 'http://localhost:8000/api/';
let jwt = localStorage.getItem('jwt') || '';
let userInfo = JSON.parse(localStorage.getItem('userInfo') || 'null');

function updateUserBar() {
    const userBar = document.getElementById('user-info');
    const logoutBtn = document.getElementById('logout-btn');
    if (jwt && userInfo) {
        userBar.innerText = `Logged in as: ${userInfo.email} (${userInfo.role})`;
        logoutBtn.style.display = '';
    } else {
        userBar.innerText = 'Not logged in';
        logoutBtn.style.display = 'none';
    }
}
updateUserBar();

document.getElementById('logout-btn').onclick = () => {
    jwt = '';
    userInfo = null;
    localStorage.removeItem('jwt');
    localStorage.removeItem('userInfo');
    updateUserBar();
    document.getElementById('products-user-msg').innerText = 'Please login to view your products.';
    document.querySelector('#products-table tbody').innerHTML = '';
};

// Helper: fetch with AES encryption for protected endpoints
async function fetchAES(url, data, method = 'POST', token = null) {
    const headers = { 'Content-Type': 'application/json' };
    if (token) headers['Authorization'] = 'Bearer ' + token;
    const body = JSON.stringify({ data: encryptAES(data) });
    const res = await fetch(url, { method, headers, body });
    const resp = await res.json();
    if (resp.data) return decryptAES(resp.data);
    return resp;
}

// Register
const regForm = document.getElementById('register-form');
regForm.onsubmit = async e => {
    e.preventDefault();
    const email = document.getElementById('reg-email').value;
    const password = document.getElementById('reg-password').value;
    const role = document.getElementById('reg-role').value;
    const resp = await fetchAES(BASE_URL + 'register/', { email, password, role });
    document.getElementById('register-result').innerText = resp.detail || JSON.stringify(resp);
};

// Login
const loginForm = document.getElementById('login-form');
loginForm.onsubmit = async e => {
    e.preventDefault();
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    const resp = await fetchAES(BASE_URL + 'login/', { email, password });
    if (resp.access) {
        jwt = resp.access;
        userInfo = resp.user;
        localStorage.setItem('jwt', jwt);
        localStorage.setItem('userInfo', JSON.stringify(userInfo));
        document.getElementById('login-result').innerText = 'Login successful!';
        updateUserBar();
        loadProducts();
    } else {
        document.getElementById('login-result').innerText = resp.detail || JSON.stringify(resp);
    }
};

// Activate
const activateForm = document.getElementById('activate-form');
activateForm.onsubmit = async e => {
    e.preventDefault();
    const uid = document.getElementById('activate-uid').value;
    const token = document.getElementById('activate-token').value;
    const res = await fetch(BASE_URL + `activate/${uid}/${token}/`);
    const resp = await res.json();
    document.getElementById('activate-result').innerText = resp.detail || JSON.stringify(resp);
};

// Dummy Product Generation
const dummyForm = document.getElementById('dummy-form');
dummyForm.onsubmit = async e => {
    e.preventDefault();
    const count = parseInt(document.getElementById('dummy-count').value);
    for (let i = 0; i < count; i++) {
        await addProduct(`Dummy Product ${Date.now()}-${i}`, 'Generated by dummy', 1);
    }
    document.getElementById('dummy-result').innerText = `Requested ${count} dummy products.`;
    loadProducts();
};

// Product CRUD
async function loadProducts() {
    if (!jwt) {
        document.getElementById('products-user-msg').innerText = 'Please login to view your products.';
        document.querySelector('#products-table tbody').innerHTML = '';
        return;
    }
    document.getElementById('products-user-msg').innerText = `Showing products for: ${userInfo.email} (${userInfo.role})`;
    const headers = { 'Authorization': 'Bearer ' + jwt };
    const res = await fetch(BASE_URL + 'products/', { headers });
    const products = await res.json();
    const tbody = document.querySelector('#products-table tbody');
    tbody.innerHTML = '';
    (products || []).forEach(prod => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${prod.id}</td><td>${prod.name}</td><td>${prod.description}</td><td>${prod.status}</td>
            <td><button onclick="editProduct(${prod.id})">Edit</button><button onclick="deleteProduct(${prod.id})">Delete</button></td>`;
        tbody.appendChild(tr);
    });
}
document.getElementById('refresh-products').onclick = loadProducts;

async function addProduct(name, description, category_id) {
    if (!jwt) return;
    const resp = await fetchAES(BASE_URL + 'products/', { name, description, category_id }, 'POST', jwt);
    document.getElementById('add-product-result').innerText = resp.detail || 'Product added!';
    loadProducts();
}

document.getElementById('add-product-form').onsubmit = async e => {
    e.preventDefault();
    const name = document.getElementById('prod-name').value;
    const description = document.getElementById('prod-desc').value;
    const category_id = parseInt(document.getElementById('prod-category').value);
    await addProduct(name, description, category_id);
};

window.editProduct = async function(id) {
    // For demo: just alert, or you can implement edit modal
    alert('Edit not implemented in this demo.');
};

window.deleteProduct = async function(id) {
    if (!jwt) return;
    const headers = { 'Authorization': 'Bearer ' + jwt };
    const res = await fetch(BASE_URL + `products/${id}/`, { method: 'DELETE', headers });
    if (res.status === 204) {
        loadProducts();
    }
};

// Auto-load products if logged in
if (jwt) loadProducts(); 